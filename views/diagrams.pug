extends includes/layout

block content
    .row.text-center.work-pad
        // p #{xmlFile}
        if isEmpty
            h3.text-center There are no cards in the database yet.
        else
          each card in data
              if !card.goal_tag && !card.need_tag && !card.challenge_tag
                  h3.no-labels There are no labeled cards
              if card.goal_tag && card.need_tag && card.challenge_tag
                  .column_inner
                      div.cardborder_tagged
                          p
                              b Goal:
                              |  #{card.goal}
                          p
                              b Need:
                              |  #{card.need}
                          p
                              b Current Solution:
                              |  #{card.current_solution}
                          p
                              b Problem:
                              |  #{card.problem}

                          p
                              b Solution Ideas:
                              |  #{card.solution_ideas}

                          p
                              b Current Benefits:
                              |  #{card.current_benefits}

                          p
                              b Comments:
                              |  #{card.comment}
                          p
                              b Created By:
                              |  #{card.email}

                          p
                              b Goal Tag:
                              |  #{card.goal_tag}
                          p
                              b Need Tag:
                              |  #{card.need_tag}
                          p
                              b Challenge Tag:
                              |  #{card.challenge_tag}
          div(id='#canvas')


    style.
      html, body {
      height: 100%;
      padding: 0;
      margin: 0;
      }
      #canvas {
      padding: 0;
      margin: 0;
      height: 75%;
      }
      .diagram-note {
      background-color: rgba(66, 180, 21, 0.7);
      color: White;
      border-radius: 5px;
      font-family: Arial;
      font-size: 12px;
      padding: 5px;
      min-height: 16px;
      width: 50px;
      text-align: center;
      }
      .needs-discussion:not(.djs-connection) .djs-visual > :nth-child(1) {
      stroke: rgba(66, 180, 21, 0.7) !important; /* color elements as red */
      }
      #save-button {
      position: fixed;
      bottom: 20px;
      left: 20px;
      }
      #js-download-diagram {
      position: fixed;
      bottom: 20px;
      left:200px;
      }
      .no-labels {
      padding-left: 2rem;
      }
    #canvas
    button#save-button download XML diagram
    button#js-download-diagram download image
    script.
        var xml;
        // var diagramUrl = 'https://cdn.rawgit.com/bpmn-io/bpmn-js-examples/dfceecba/starter/diagram.bpmn';
        var diagramUrl = '../resources/newDiagram.bpmn';
        // modeler instance
        //var diagramUrl = xmlFile;

        var bpmnModeler = new BpmnJS({
        container: '#canvas',
        keyboard: {
        bindTo: window
        }
        });
        function exportDiagram() {
        bpmnModeler.saveXML({ format: true }, function(err, xml) {
        if (err) {
        return console.error('could not save BPMN 2.0 diagram', err);
        }
        //alert('Diagram exported. Check the developer tools!');
        console.log('DIAGRAM', xml);
        var file = new Blob([xml], {type: 'bpmn'});
        url = URL.createObjectURL(file);
        var link = document.createElement('a');
        link.download = 'diagram.bpmn';
        link.href = url;
        link.click();

        });
        }
        /**
        * Open diagram in our modeler instance.
        *
        * @param {String} bpmnXML diagram to display
        */
        function openDiagram(bpmnXML) {
        // import diagram
        bpmnModeler.importXML(bpmnXML, function(err) {
        if (err) {
        return console.error('could not import BPMN 2.0 diagram', err);
        }

        // access modeler components
        var canvas = bpmnModeler.get('canvas');
        var overlays = bpmnModeler.get('overlays');
        // zoom to fit full viewport
        canvas.zoom('fit-viewport');
        // attach an overlay to a node
        overlays.add('SCAN_OK', 'note', {
        position: {
        bottom: 0,
        right: 0
        },
        html: '<div class="diagram-note">Mixed up the labels?</div>'
        });
        // add marker
        canvas.addMarker('SCAN_OK', 'needs-discussion');
        });
        }
        // load external diagram file via AJAX and open it

        /*
        var httpRequest = new XMLHttpRequest()
        httpRequest.onreadystatechange = function (data) {
          openDiagram(data);
          if (httpRequest.readyState === 4 && httpRequest.status === 200) {
            //httpRequest.responseType = 'text';
          }
        }
        httpRequest.open('GET', diagramUrl)
        httpRequest.send()
        */

        function setEncoded(name, data) {
          var encodedData = encodeURIComponent(data);
          var link = document.createElement('a');

          if (data) {
            link.classList.add('active').attr({
              'href': 'data:application/bpmn20-xml;charset=UTF-8,' + encodedData,
              'download': name
            });
          } else {
            link.removeClass('active');
          }
        }
        /*
        function saveSVG(done) {
          bpmnModeler.saveSVG(done);
        }

        function exportSVG() {
          saveSVG((err,svg) => {

            setEncoded('diagram.svg', err ? null : svg);
            if (err) {
              console.log("failed to save svg");
            }
          }, 500);
        }
        */

        // wire save button
        $.get(diagramUrl, openDiagram, 'text');
        $('#save-button').click(exportDiagram);
        $('#js-download-diagram').click(exportSVG);
